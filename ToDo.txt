new stuff:

- physics
    - collision checks
        - bounding box for objects (probably not 1-to-1 with the mesh for easier computing)
    - collision handling
        - seperate functions for each set of two objects

- add multiple color meshes
    - let each tri be a different color
    - let tris be drawn as a png

- add functionailty to pick an object by looking at it and tranform that specific object
    - ray cast to find an object
        - probably just check each object rather than actually stepping along a ray since theres few objects in the scene

- expand UI functionality.
    - create new objects
    - change more traits for each object

- create an improved font renderer
    - use a 32x32 bitmap, then downscale to specified size
    - probably in a textfile, since thats easiest to parse, but some image format would be easiest to create

- UI Action Handling
    - ActionOpenWindow Updates
        - Modify ActionOpenWindow to also take an optional function pointer with the signature void func(WindowHandle). This would be the binding function
        - This way, theres a general way to handle all window bindings, and the code around the function can be changed for more context (extra variables in scope)
        - This function will be called on window creation, using the resulting WindowHandle from the this->createWindow() call
    - Rebinding Logic
        - Implement a mechanism to trigger rebinds when objectOfInterest changes (either manual call or event-driven).
        - Ensure UI windows that depend on objectOfInterest update correctly when a new object is selected.
    - Code Organization
        - Place ObjectHandling and related logic in a structured namespace or class.
        - Ensure bindWindow() functions remain modular and follow the void (*)() function signature for compatibility with ActionCallFunc.
    - See "not used/temp.cpp" for an example structure

    - Extra note:
        - might be worth having Window instances store their binding functions, could simplify some things

fixes:
- fix depth interpolation, depth between two points is not always linear.
- fix TextInput UI elements from drawing to infinite length.
    - probably just add a parameter 'maxLength' to Drawer::drawString()

optimizations:
- make drawTri (and other draw functions) skip out of range values entirely rather than letting writePixel do that work
- add a draw queue which will have threads to work only on drawing, while the main thread can do the math and feed the stuff that needs to be drawn to the queue
