new stuff:

- DLLs for scripting. use a language like C# (or maybe just stick with C++), and compile into a DLL dynamically.

- physics
    - collision checks
        - bounding box for objects (probably not 1-to-1 with the mesh for easier computing)
    - collision handling
        - seperate functions for each set of two objects

- add multiple color meshes
    - let each tri be a different color
    - let tris be drawn as a png

- create an improved font renderer
    - use a 32x32 bitmap, then downscale to specified size
    - probably in a textfile, since thats easiest to parse, but some image format would be easiest to create

fixes:
- fix depth interpolation, depth between two points is not always linear.
    - take the distance of the pixel from each of the vertex coordinates (from 0-1 for each, totaling to 1)
    - use these factors to find the 3d coordinate of the pixel, and find the depth directly of that position
- fix TextInput UI elements from drawing to infinite length.
    - probably just add a parameter 'maxLength' to Drawer::drawString()

optimizations:

- Put all (or most) error checks inside a "#ifdef SAFEMODE" block
  This way i can have the added performance of skipping the error checks, and optionally activate them again by defining SAFEMODE globally and recompiling

- make drawTri (and other draw functions) skip out of range values entirely rather than letting writePixel do that work
- add a draw queue which will have threads to work only on drawing, while the main thread can do the math and feed the stuff that needs to be drawn to the queue



Notes:
