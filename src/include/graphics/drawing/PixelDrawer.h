#pragma once

#include "util/Utility.h"

#include "graphics/drawing/PixelTracker.h"

#include "graphics/gui/Core.h"


namespace Graphics {
namespace Drawing {
    
class PixelDrawer {

    /*
        This is the lowest level of the drawing lib
        This just draws pixel by pixel, and does all the low level handling for you
        Depth based drawing is also handled at this level

        The pixel buffer (this->buffer) is NOT owned by this class
        This buffer is generated by Gui::Window, and is given to this class
    */

    public:

        /*   Instance variables   */
        
        // This is the pixel buffer
        uint32* buffer;

        // The depth buffer stores the distance between each pixel and the camera. this allows meshes to be drawn in any order while appearing accurately.
        float* depthBuffer;

        // Buffer dimensions. the pixel and depth buffers share these
        unsigned int bufferHeight, bufferWidth;
        unsigned int bufferSize;

        // Used to track what Object drew to a certain pixel
        // This is how the user can select objects by clicking them
        PixelTracker pixelTracker;


        // Constructor
        PixelDrawer(int width, int height);

        // Destructor
        ~PixelDrawer();


        /*   Instance Functions   */

        // Takes the bounds of the display object and applies them to this drawer
        // width and height should not exceed Gui::PIXEL_BUFFER_WIDTH and Gui::PIXEL_BUFFER_HEIGHT respectively
        void updateDimensions(int width, int height);

        // Sets all the values in the depth buffer to infinity
        void resetDepthBuffer();

        // Returns the 1d index cooresponding to a 2d set of indices
        int bufferIndex(int x, int y) const;

        // Returns true if the coordinate exists in the buffer
        bool inBufferRange(int x, int y) const;

        // Changes the values of the given coordinates to be within the buffer range.
        void clipCoordinates(int* x, int* y) const;

        /*
            Drawing can be done with or without depth
            When rendering with depth, an opacity value can also be given
            When drawing with sub 1.0 opacity, the pixel will be blended with the pixel behind it
        */

        // Sets the pixel at the given coordinates to the uint32 value given
        void drawPixel(uint32 pixel, int x, int y);

        // Sets the pixel at the given coordinates to the uint32 value given
        // Also checks against the depth buffer, with optional opacity for alpha blending
        // Any non-opaque pixels will not update the depth buffer with their depth
        void drawPixel(uint32 pixel, int x, int y, float depth, float opacity = 1.0);

    private:

        // This is the maximum allowed index for the buffers
        static constexpr unsigned int maxBufferIndex = Gui::PIXEL_BUFFER_WIDTH * Gui::PIXEL_BUFFER_HEIGHT;

};

}
}
